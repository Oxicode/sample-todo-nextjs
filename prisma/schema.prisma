//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator js {
    provider = "prisma-client-js"
}

enum SpaceUserRole {
    USER
    ADMIN
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members ? [user == auth()])
/// @@allow('update,delete', members ? [user == auth() && role == ADMIN])
model Space {
    id String @id() @default(uuid())
    /// @length(4, 50)
    name String
    /// @regex('^[0-9a-zA-Z]{4,16}$')
    slug String @unique()
    members SpaceUser[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

/// @@deny('all', auth() == null)
/// @@allow('create,update,delete', space.members ? [user == auth() && role == ADMIN])
/// @@allow('read', space.members ? [user == auth()])
model SpaceUser {
    id String @id() @default(uuid())
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role SpaceUserRole
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
    @@unique([userId, spaceId])
}

/// @@allow('create', true)
/// @@allow('read', spaces ? [space.members ? [user == auth()]])
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(uuid())
    /// @email
    email String @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String?
    name String?
    spaces SpaceUser[]
    /// @url
    image String?
    accounts Account[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model Account {
    id String @id() @default(uuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    refresh_token_expires_in Int?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}