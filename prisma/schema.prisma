//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="sqlite"
    url="file:./dev.db"
}

generator js {
    provider = "prisma-client-js"
}

/// @@allow('create', true)
/// @@allow('read', auth() != null)
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @email
    email String @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String?
    name String?
    /// @url
    image String?
    lists List[]
    todos Todo[]
    accounts Account[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

/// @@deny('all', auth() == null)
/// @@allow('all', auth() == owner)
/// @@allow('read', !private)
model List {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    /// @length(1, 100)
    title String
    private Boolean @default(false)
    todos Todo[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

/// @@deny('all', auth() == null)
/// @@allow('all', list.owner == auth())
/// @@allow('read', !list.private)
model Todo {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    /// @length(1, 100)
    title String
    completedAt DateTime?
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model Account {
    id String @id() @default(uuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    refresh_token_expires_in Int?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}