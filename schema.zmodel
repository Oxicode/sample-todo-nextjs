/*
* Sample model for a collaborative Todo app
*/

/*
 * Data source definition
 */
datasource db {
    provider = 'sqlite'
    url="file:./dev.db"
}

generator js {
    provider = 'prisma-client-js'
}

plugin reactHooks {
    provider = '@zenstackhq/react'
    output = 'lib/hooks'
}


/*
 * Model for a user
 */
model User {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email String @unique @email
    emailVerified DateTime?
    password String? @password @omit
    name String?
    image String? @url
    lists List[]
    todos Todo[]

    // next-auth
    accounts Account[]

    // can be created by anyone, even not logged in
    @@allow('create', true)

    // can be read by other users
    @@allow('read', auth() != null)

    // full access by oneself
    @@allow('all', auth() == this)
}

/*
 * Model for a Todo list
 */
model List {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    title String @length(1, 100)
    private Boolean @default(false)
    todos Todo[]


    // require login
    @@deny('all', auth() == null)
    // owner has full access
    @@allow('all', auth() == owner)

    // can be read by anyone if is public 
    @@allow('read', !private)
}

/*
 * Model for a single Todo
 */
model Todo {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    title String @length(1, 100)
    completedAt DateTime?

    // require login
    @@deny('all', auth() == null)

    // list owner has full access 
    @@allow('all', list.owner == auth())

    // can be read by anyone if is public 
    @@allow('read', !list.private)
}

// next-auth
model Account {
    id String @id @default(uuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    refresh_token_expires_in Int?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}